import { makeWASocket, DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys'
import { Boom } from '@hapi/boom'
import pino from 'pino'
import qrcode from 'qrcode-terminal'
import fs from 'fs'
import path from 'path'

// Fetch √© nativo no Node.js 18+
const fetch = globalThis.fetch

// Configura√ß√µes do bot
const config = {
    botName: 'ü§ñ Bot Moderador',
    ownerNumber: '', // N√∫mero do dono do bot (formato: 5511999999999)
    admins: [], // N√∫meros dos admins (ser√° carregado do config.json)
    prefix: '!',
    autoWelcome: true
}

// Estado do bot para o painel web
let botStats = {
    connected: false,
    totalMessages: 0,
    groups: [],
    startTime: new Date(),
    connectionTime: null,  // Quando o bot conectou de fato
    lastWelcome: 0  // Rate limiting para boas-vindas
}

// Configura√ß√£o web (para integra√ß√£o com painel)
let webConfig = null
let webServer = null

// Tentar carregar servidor web (apenas se n√£o estiver rodando externamente)
try {
    // Verificar se o servidor web deve ser carregado internamente
    const shouldLoadWebServer = !process.env.EXTERNAL_WEB_SERVER && process.argv.includes('--with-web')
    
    if (shouldLoadWebServer) {
        webServer = await import('./web/server.js')
        console.log('üåê Integra√ß√£o com painel web carregada internamente')
    } else {
        console.log('üåê Painel web em modo externo (use npm run web separadamente)')
    }
} catch (error) {
    console.log('‚ö†Ô∏è Painel web n√£o dispon√≠vel (execute npm run web em outro terminal)')
}

// Mensagem de regras que ser√° enviada para novos membros
const WELCOME_MESSAGE = `üî¥ *Regras do Grupo* üî¥

*[1¬∞]* Respeito sempre ‚Äì sem insultos, preconceitos ou ofensas.

*[2¬∞]* Proibido spam ‚Äì nada de flood, links irrelevantes ou propaganda sem permiss√£o.

*[3¬∞]* Foque no tema do grupo.

*[4¬∞]* Sem conte√∫do impr√≥prio (pornografia, viol√™ncia extrema, ilegal).

*[5¬∞]* Discuss√µes construtivas sim, brigas n√£o.

*[6¬∞]* Evite fake news ‚Äì confirme antes de compartilhar.

*[7¬∞]* Respeite os admins e suas decis√µes.

*[8¬∞]* Idade m√≠nima: 15+.

*[9¬∞]* Proibida venda, servi√ßos ou jogos de azar.

*[10¬∞]* O contato com os administradores deve ser feito exclusivamente no grupo (n√£o pode ir no privado).

*[11¬∞]* Envio de APKs permitidos apenas de sites confi√°veis e sem an√∫ncios. APKs puros s√£o restritos a administradores, garantindo a seguran√ßa.

‚ö†Ô∏è *Quebrar regras = banimento* ‚ö†Ô∏è`

// Carregar configura√ß√µes dos admins
function loadConfig() {
    try {
        if (fs.existsSync('./config.json')) {
            const configData = JSON.parse(fs.readFileSync('./config.json', 'utf-8'))
            config.admins = configData.admins || []
            config.ownerNumber = configData.ownerNumber || ''
            console.log('üìã Configura√ß√µes carregadas:', config.admins.length, 'admins configurados')
        } else {
            console.log('‚ö†Ô∏è Arquivo config.json n√£o encontrado. Criando arquivo exemplo...')
            createExampleConfig()
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar configura√ß√µes:', error.message)
        createExampleConfig()
    }
}

// Carregar configura√ß√µes do painel web
async function loadWebConfig() {
    try {
        if (webServer && webServer.getWebConfig) {
            webConfig = webServer.getWebConfig()
            if (webConfig.settings) {
                config.autoWelcome = webConfig.settings.autoWelcome !== false
            }
            console.log('üåê Configura√ß√µes web carregadas')
        } else {
            console.log('üåê Tentando carregar configura√ß√µes via HTTP...')
            const loaded = await loadWebConfigHTTP()
            if (!loaded) {
                console.log('üåê Configura√ß√µes web n√£o dispon√≠veis (modo independente)')
            }
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar configura√ß√µes web:', error.message)
    }
}

// Atualizar status para o painel web  
function updateWebStatus(sock) {
    if (!webServer || !webServer.updateBotStatus) {
        // Servidor web n√£o carregado, tentar via HTTP
        updateWebStatusHTTP(sock)
        return
    }
    
    try {
        botStats.connected = !!sock?.user?.id
        botStats.lastUpdate = new Date()
        
        webServer.updateBotStatus(botStats)
    } catch (error) {
        console.error('‚ùå Erro ao atualizar status web:', error.message)
    }
}

// Atualizar status via HTTP (quando rodando separadamente)
async function updateWebStatusHTTP(sock) {
    try {
        botStats.connected = !!sock?.user?.id
        botStats.lastUpdate = new Date()
        botStats.groups = await getGroupsList(sock)
        
        const controller = new AbortController()
        const timeoutId = setTimeout(() => controller.abort(), 5000) // 5s timeout
        
        const response = await fetch('http://localhost:3000/api/status', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(botStats),
            signal: controller.signal
        })
        
        clearTimeout(timeoutId)
        
        if (response.ok) {
            console.log('üåê Status sincronizado com painel web via HTTP')
        } else {
            console.log('‚ö†Ô∏è Erro HTTP ao sincronizar:', response.status)
        }
    } catch (error) {
        if (error.name === 'AbortError') {
            console.log('‚ö†Ô∏è Timeout ao sincronizar com painel web')
        } else {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel sincronizar com painel web:', error.message)
        }
    }
}

// Carregar configura√ß√µes via HTTP (quando rodando separadamente)  
async function loadWebConfigHTTP() {
    try {
        console.log('üîÑ Carregando configura√ß√µes completas do painel web...')
        
        const controller = new AbortController()
        const timeoutId = setTimeout(() => controller.abort(), 5000) // 5s timeout
        
        // Carregar settings
        const settingsResponse = await fetch('http://localhost:3000/api/settings', {
            signal: controller.signal
        })
        
        // Carregar comandos customizados
        const commandsResponse = await fetch('http://localhost:3000/api/commands', {
            signal: controller.signal
        })
        
        // Carregar grupos ativos
        const groupsResponse = await fetch('http://localhost:3000/api/groups', {
            signal: controller.signal
        })
        
        clearTimeout(timeoutId)
        
        if (settingsResponse.ok && commandsResponse.ok && groupsResponse.ok) {
            const settingsData = await settingsResponse.json()
            const commandsData = await commandsResponse.json()
            const groupsData = await groupsResponse.json()
            
            if (settingsData.success && commandsData.success && groupsData.success) {
                webConfig = {
                    settings: settingsData.data,
                    customCommands: commandsData.data || [],
                    activeGroups: groupsData.data.activeGroups || {}
                }
                
                config.autoWelcome = webConfig.settings.autoWelcome !== false
                
                console.log('üåê Configura√ß√µes web carregadas via HTTP')
                console.log(`‚öôÔ∏è Settings: ${Object.keys(webConfig.settings).length} configura√ß√µes carregadas`)
                console.log(`üìù Comandos customizados: ${webConfig.customCommands.length} comandos carregados`)
                console.log(`üë• Grupos configurados: ${Object.keys(webConfig.activeGroups).length} grupos`)
                
                // Log dos comandos para debug
                if (webConfig.customCommands.length > 0) {
                    console.log('üéØ Comandos dispon√≠veis:')
                    webConfig.customCommands.forEach(cmd => {
                        console.log(`   - !${cmd.command} (${cmd.adminOnly ? 'admin' : 'p√∫blico'}): ${cmd.response?.substring(0, 40)}...`)
                    })
                } else {
                    console.log('‚ö†Ô∏è Nenhum comando customizado configurado no painel web')
                }
                
                return true
            }
        }
    } catch (error) {
        if (error.name === 'AbortError') {
            console.log('‚ö†Ô∏è Timeout ao carregar configura√ß√µes web (5s)')
        } else {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel carregar configura√ß√µes web via HTTP:', error.message)
        }
    }
    return false
}

// Verificar se √© seguro enviar mensagem de boas-vindas
function isSafeToSendWelcome(sock, participants, groupId) {
    // 1. Verificar se o bot conectou h√° pelo menos 2 minutos (evitar sincroniza√ß√£o inicial)
    if (!botStats.connectionTime) {
        return false
    }
    
    const timeSinceConnection = Date.now() - botStats.connectionTime.getTime()
    const minTimeRequired = 2 * 60 * 1000 // 2 minutos em ms
    
    if (timeSinceConnection < minTimeRequired) {
        return false
    }
    
    // 2. Verificar se n√£o √© o pr√≥prio bot sendo adicionado
    const botNumber = sock?.user?.id?.split(':')[0]
    if (botNumber && participants.some(p => p.includes(botNumber))) {
        return false
    }
    
    // 3. Verificar se participantes n√£o s√£o vazios
    if (!participants || participants.length === 0) {
        return false
    }
    
    // 4. Verificar se n√£o √© uma adi√ß√£o em massa suspicinha (mais de 5 pessoas)
    if (participants.length > 5) {
        console.log('‚ö†Ô∏è Boas-vindas: Adi√ß√£o em massa detectada, ignorando por seguran√ßa')
        return false
    }
    
    // 5. Rate limiting - n√£o enviar boas-vindas muito frequentes
    const lastWelcome = botStats.lastWelcome || 0
    const minWelcomeInterval = 10 * 1000 // 10 segundos entre boas-vindas
    
    if (Date.now() - lastWelcome < minWelcomeInterval) {
        console.log('‚ö†Ô∏è Boas-vindas: Rate limit ativo, aguardando')
        return false
    }
    
    return true
}

// Obter lista de grupos
async function getGroupsList(sock) {
    if (!sock) return []
    
    try {
        const groups = await sock.groupFetchAllParticipating()
        return Object.values(groups).map(group => ({
            id: group.id,
            subject: group.subject || 'Sem nome',
            participants: group.participants?.length || 0,
            creation: group.creation || 0,
            owner: group.owner || null,
            desc: group.desc || null
        }))
    } catch (error) {
        console.error('‚ùå Erro ao obter grupos:', error.message)
        // Retornar grupos em cache se dispon√≠vel
        return botStats.groups || []
    }
}

// Verificar se grupo est√° ativo
function isGroupActive(groupId) {
    if (!webConfig) {
        console.log('üåê WebConfig n√£o dispon√≠vel, grupo ativo por padr√£o:', groupId)
        return true // Padr√£o: todos ativos
    }
    
    // Verificar se activeGroups existe antes de acessar
    if (!webConfig.activeGroups) {
        console.log('üåê ActiveGroups n√£o configurado, grupo ativo por padr√£o:', groupId)
        return true
    }
    
    const isActive = webConfig.activeGroups[groupId] !== false
    console.log('üåê Status do grupo', groupId, ':', isActive ? 'ATIVO' : 'INATIVO')
    return isActive
}

// Obter comandos customizados (com reload din√¢mico)
async function getCustomCommands(forceReload = false) {
    // Se forceReload √© true ou n√£o temos configura√ß√£o, recarregar
    if (forceReload || !webConfig || !webConfig.customCommands) {
        console.log('üîÑ [CUSTOM CMD] Recarregando comandos customizados...')
        await loadWebConfig()
    }
    
    if (!webConfig) {
        console.log('‚ö†Ô∏è [CUSTOM CMD] webConfig n√£o dispon√≠vel')
        return []
    }
    
    const commands = webConfig.customCommands || []
    console.log(`üìù [CUSTOM CMD] ${commands.length} comandos customizados dispon√≠veis em webConfig`)
    
    return commands
}

// Processar comando customizado
async function processCustomCommand(command, message, sock, senderNumber, groupId, isUserAdmin) {
    const customCommands = await getCustomCommands()
    
    console.log(`üîç [CUSTOM CMD] Procurando comando '${command}' entre ${customCommands.length} comandos`)
    if (customCommands.length > 0) {
        console.log(`üìù [CUSTOM CMD] Comandos dispon√≠veis: ${customCommands.map(c => c.command).join(', ')}`)
    }
    
    let customCommand = customCommands.find(c => c.command === command)
    
    // Se n√£o encontrou o comando, tentar recarregar uma vez
    if (!customCommand) {
        console.log(`üîÑ [CUSTOM CMD] Comando '${command}' n√£o encontrado, tentando reload...`)
        const reloadedCommands = await getCustomCommands(true)
        customCommand = reloadedCommands.find(c => c.command === command)
    }
    
    if (!customCommand) {
        console.log(`‚ùå [CUSTOM CMD] Comando '${command}' n√£o encontrado mesmo ap√≥s reload`)
        return false
    }
    
    console.log(`‚úÖ [CUSTOM CMD] Comando '${command}' encontrado! AdminOnly: ${customCommand.adminOnly}, IsUserAdmin: ${isUserAdmin}`)
    
    // Verificar permiss√µes
    if (customCommand.adminOnly && !isUserAdmin) {
        await sock.sendMessage(groupId, {
            text: '‚ùå Este comando √© restrito a administradores.',
            quoted: message
        })
        return true
    }
    
    // Processar resposta
    let response = customCommand.response
    
    // Substituir vari√°veis
    const userNumber = senderNumber.replace('@s.whatsapp.net', '')
    response = response.replace(/{user}/g, `@${userNumber}`)
    
    // Enviar resposta
    const mentions = response.includes(`@${userNumber}`) ? [senderNumber] : []
    
    await sock.sendMessage(groupId, {
        text: response,
        mentions,
        quoted: message
    })
    
    // Atualizar contadores
    try {
        customCommand.usage = (customCommand.usage || 0) + 1
        if (webServer) {
            // Salvar uso atualizado (implementar se necess√°rio)
        }
    } catch (error) {
        console.error('Erro ao atualizar contador de uso:', error)
    }
    
    console.log(`‚ö° Comando customizado executado: !${command} por ${userNumber}`)
    return true
}

// Criar arquivo de configura√ß√£o de exemplo
function createExampleConfig() {
    const exampleConfig = {
        ownerNumber: "5511999999999",
        admins: [
            "5511999999999",
            "5511888888888"
        ]
    }
    fs.writeFileSync('./config.json', JSON.stringify(exampleConfig, null, 2))
    console.log('‚úÖ Arquivo config.json criado! Edite-o com os n√∫meros dos administradores.')
}

// Verificar se o usu√°rio √© admin
async function isAdmin(userNumber, sock = null, groupId = null) {
    const cleanNumber = userNumber.replace('@s.whatsapp.net', '').replace(/:.*/, '')
    
    console.log(`üîç [DEBUG ADMIN] Verificando: ${cleanNumber}`)
    
    // 1. Verificar se √© admin configurado ou owner configurado
    let isAdminUser = config.admins.includes(cleanNumber) || cleanNumber === config.ownerNumber
    console.log(`üìã [DEBUG ADMIN] Admin/Owner configurado: ${isAdminUser}`)
    
    // 2. Verificar se √© o dono do n√∫mero conectado ao bot
    if (sock && sock.user && sock.user.id) {
        const botOwnerNumber = sock.user.id.replace(/:.*/, '').replace('@s.whatsapp.net', '')
        console.log(`ü§ñ [DEBUG ADMIN] Bot owner: ${botOwnerNumber}, User: ${cleanNumber}`)
        if (cleanNumber === botOwnerNumber) {
            console.log(`üëë [DEBUG ADMIN] √â o dono do bot!`)
            isAdminUser = true
        }
    }
    
    // 3. NOVO: Verificar se √© admin do grupo atual
    if (!isAdminUser && sock && groupId && groupId.endsWith('@g.us')) {
        try {
            console.log(`üë• [DEBUG ADMIN] Verificando admin do grupo: ${groupId}`)
            const groupMetadata = await sock.groupMetadata(groupId)
            const participant = groupMetadata.participants.find(p => {
                const participantNumber = p.id.replace('@s.whatsapp.net', '')
                return participantNumber === cleanNumber || 
                       p.id === userNumber || 
                       p.id === (cleanNumber + '@s.whatsapp.net')
            })
            
            if (participant) {
                console.log(`üë§ [DEBUG ADMIN] Participante encontrado: ${participant.id}, admin: ${participant.admin}`)
                if (participant.admin === 'admin' || participant.admin === 'superadmin') {
                    console.log(`üõ°Ô∏è [DEBUG ADMIN] √â admin do grupo!`)
                    isAdminUser = true
                }
            } else {
                console.log(`‚ö†Ô∏è [DEBUG ADMIN] Participante n√£o encontrado no grupo`)
            }
        } catch (error) {
            console.error('‚ùå [DEBUG ADMIN] Erro ao verificar admins do grupo:', error.message)
        }
    }
    
    console.log(`üéØ [DEBUG ADMIN] RESULTADO FINAL: ${isAdminUser}`)
    return isAdminUser
}

// Extrair n√∫mero mencionado na mensagem
function getMentionedNumber(message) {
    const extendedText = message.message?.extendedTextMessage
    let mentionedJid = null
    
    // Tentar pegar da mensagem extendida
    if (extendedText?.contextInfo?.mentionedJid) {
        mentionedJid = extendedText.contextInfo.mentionedJid[0]
    }
    
    // Se n√£o encontrou, tentar pegar de participant (para mensagens quotadas)
    if (!mentionedJid && extendedText?.contextInfo?.participant) {
        mentionedJid = extendedText.contextInfo.participant
    }
    
    if (mentionedJid) {
        const cleanNumber = mentionedJid.replace('@s.whatsapp.net', '')
        return cleanNumber
    }
    
    return null
}

// Fun√ß√£o principal do bot
async function startBot() {
    // Carregar configura√ß√µes
    loadConfig()
    await loadWebConfig()  // Agora √© async
    
    let sock = null // Declare sock variable

    // Estado de autentica√ß√£o
    const { state, saveCreds } = await useMultiFileAuthState('./auth_info')
    
    // Criar socket do WhatsApp
    sock = makeWASocket({
        auth: state,
        logger: pino({ level: 'silent' }),
        browser: ['Bot Moderador', 'Desktop', '1.0.0']
    })

    // Salvar credenciais quando atualizadas
    sock.ev.on('creds.update', saveCreds)

    // Gerenciar conex√£o
    sock.ev.on('connection.update', async (update) => {
        const { connection, lastDisconnect, qr } = update
        
        if (qr) {
            console.log('üì± Escaneie o QR Code abaixo com seu WhatsApp!')
            qrcode.generate(qr, { small: true })
        }
        
        if (connection === 'close') {
            const shouldReconnect = (lastDisconnect?.error && new Boom(lastDisconnect?.error)?.output?.statusCode !== DisconnectReason.loggedOut)
            console.log('‚ùå Conex√£o fechada devido a:', lastDisconnect?.error, ', reconectando:', shouldReconnect)
            
            botStats.connected = false
            updateWebStatus(sock)
            
            if (shouldReconnect) {
                startBot()
            }
        } else if (connection === 'open') {
            console.log('‚úÖ Bot conectado ao WhatsApp!')
            console.log('ü§ñ Bot est√° ativo e monitorando mensagens...')
            
            // Registrar momento da conex√£o
            botStats.connectionTime = new Date()
            console.log('‚è∞ Conex√£o estabelecida √†s:', botStats.connectionTime.toLocaleTimeString())
            
            // Atualizar status web
            botStats.connected = true
            botStats.groups = await getGroupsList(sock)
            updateWebStatus(sock)
            
            // Aguardar um pouco para sincroniza√ß√£o
            setTimeout(async () => {
                console.log('üîÑ Sincronizando dados iniciais...')
                if (sock?.user?.id) {
                    await updateWebStatusHTTP(sock)
                }
            }, 3000)
            
            // Configurar recarregamento autom√°tico das configura√ß√µes web a cada 30 segundos
            const configReloadInterval = setInterval(async () => {
                try {
                    const oldCommandsCount = webConfig?.customCommands?.length || 0
                    await loadWebConfig()
                    const newCommandsCount = webConfig?.customCommands?.length || 0
                    
                    if (newCommandsCount !== oldCommandsCount) {
                        console.log(`üîÑ [AUTO-RELOAD] Comandos customizados atualizados: ${oldCommandsCount} ‚Üí ${newCommandsCount}`)
                        if (webConfig?.customCommands?.length > 0) {
                            console.log(`üìù [AUTO-RELOAD] Comandos dispon√≠veis: ${webConfig.customCommands.map(c => c.command).join(', ')}`)
                        }
                    }
                } catch (error) {
                    console.log('‚ö†Ô∏è [AUTO-RELOAD] Erro ao recarregar configura√ß√µes automaticamente:', error.message)
                }
            }, 30000) // 30 segundos
            
            console.log('üîÑ Auto-reload de configura√ß√µes ativado (a cada 30 segundos)')
            
            if (webServer) {
                console.log('üåê Painel web integrado - Status sincronizado')
            }
        }
    })

    // Gerenciar atualiza√ß√µes de grupos (novos membros)
    sock.ev.on('group-participants.update', async (update) => {
        if (!config.autoWelcome) {
            console.log('üìã Boas-vindas desabilitadas na configura√ß√£o')
            return
        }

        const { id: groupId, participants, action, author } = update
        
        console.log('\nüîÑ === EVENT: group-participants.update ===')
        console.log('üìç Grupo:', groupId)
        console.log('üë• Participantes afetados:', participants?.length || 0)
        console.log('‚ö° A√ß√£o:', action)
        console.log('üë§ Autor (quem fez a a√ß√£o):', author || 'Sistema')
        console.log('‚è∞ Timestamp:', new Date().toLocaleTimeString())
        
        if (action === 'add') {
            console.log('‚ûï A√ß√£o de ADICIONAR detectada')
            
            // Verificar se √© seguro enviar boas-vindas
            if (!isSafeToSendWelcome(sock, participants, groupId)) {
                console.log('‚ùå N√£o √© seguro enviar boas-vindas agora, pulando...')
                console.log('========================================\n')
                return
            }
            
            // Aguardar um pouco antes de enviar a mensagem (dar tempo para participante carregar)
            console.log('‚úÖ Enviando mensagem de boas-vindas em 3 segundos...')
            setTimeout(async () => {
                try {
                    await sock.sendMessage(groupId, {
                        text: WELCOME_MESSAGE
                    })
                    
                    // Atualizar timestamp da √∫ltima boas-vindas
                    botStats.lastWelcome = Date.now()
                    
                    console.log('üì®‚úÖ Mensagem de boas-vindas enviada com sucesso para o grupo:', groupId)
                    console.log('üëã Novos membros:', participants.map(p => p.replace('@s.whatsapp.net', '')).join(', '))
                } catch (error) {
                    console.error('‚ùå Erro ao enviar mensagem de boas-vindas:', error.message)
                    // Se der erro, n√£o atualizar o timestamp para poder tentar novamente
                }
            }, 3000)
        } else {
            console.log(`‚ÑπÔ∏è A√ß√£o '${action}' n√£o requer boas-vindas`)
        }
        
        console.log('========================================\n')
    })

    // Gerenciar mensagens recebidas
    sock.ev.on('messages.upsert', async ({ messages }) => {
        const message = messages[0]
        if (!message.message) {
            console.log('‚ö†Ô∏è Mensagem sem conte√∫do, ignorando...')
            return
        }

        const messageText = message.message?.conversation || 
                          message.message?.extendedTextMessage?.text || ''
        
        // Se for mensagem pr√≥pria, s√≥ processar se for comando
        if (message.key.fromMe) {
            if (!messageText.startsWith(config.prefix)) {
                console.log('ü§ñ Mensagem pr√≥pria sem comando, ignorando...')
                return // Ignorar mensagens pr√≥prias que n√£o s√£o comandos
            } else {
                console.log('üëë üî• MENSAGEM PR√ìPRIA COM COMANDO DETECTADA! Processando...')
            }
        }
        const isGroup = message.key.remoteJid?.endsWith('@g.us')
        const senderNumber = message.key.fromMe 
            ? sock.user.id.replace(/:.*/, '') + '@s.whatsapp.net'
            : (message.key.participant || message.key.remoteJid)
        const groupId = message.key.remoteJid

        // Log simplificado - apenas para comandos
        if (messageText.startsWith(config.prefix)) {
            console.log(`üì® Comando recebido: ${messageText} - Grupo: ${isGroup} - Remetente: ${senderNumber.replace('@s.whatsapp.net', '')}`)
        }

        // Contar mensagem processada
        botStats.totalMessages++
        
        // Verificar se grupo est√° ativo (apenas se n√£o for comando de config)
        if (isGroup && !messageText.startsWith('!botadmin') && !messageText.startsWith('!debug')) {
            console.log('üîç Verificando se grupo est√° ativo:', groupId)
            if (!isGroupActive(groupId)) {
                console.log('‚è∏Ô∏è Grupo inativo, ignorando mensagem')
                return
            }
            console.log('‚úÖ Grupo ativo, continuando processamento')
        }

        // Processar comandos apenas em grupos
        if (isGroup && messageText.startsWith(config.prefix)) {
            console.log('üéÜ COMANDO DETECTADO! Processando...')
            const args = messageText.slice(config.prefix.length).trim().split(' ')
            const command = args[0].toLowerCase()
            console.log('üî• Comando extra√≠do:', command)
            console.log('üìã Argumentos:', args)

            // Verificar se √© comando customizado primeiro
            const isUserAdmin = await isAdmin(senderNumber, sock, groupId)
            console.log('üëë Usu√°rio √© admin?', isUserAdmin)
            
            if (await processCustomCommand(command, message, sock, senderNumber, groupId, isUserAdmin)) {
                // Comando customizado processado
                console.log('‚ö° Comando customizado processado')
                updateWebStatus(sock)
                return
            }

            // Comando para remover usu√°rio (!kick @usuario)
            if (command === 'kick' || command === 'remover' || command === 'remove') {
                console.log('üî® === PROCESSANDO COMANDO KICK ===')
                console.log('üî® Comando kick executado por:', senderNumber)
                
                // Verificar se o remetente √© admin
                if (!(await isAdmin(senderNumber, sock, groupId))) {
                    console.log('‚ùå Usu√°rio n√£o √© admin')
                    await sock.sendMessage(groupId, {
                        text: '‚ùå Voc√™ n√£o tem permiss√£o para usar este comando.\n\nüìù Para usar comandos administrativos voc√™ deve ser:\n‚Ä¢ Admin do grupo atual\n‚Ä¢ Owner/Admin configurado no bot\n‚Ä¢ Dono do n√∫mero conectado',
                        quoted: message
                    })
                    return
                }

                console.log('‚úÖ Usu√°rio √© admin, processando men√ß√£o...')
                
                // Verificar se h√° usu√°rio mencionado
                const mentionedNumber = getMentionedNumber(message)
                if (!mentionedNumber) {
                    console.log('‚ùå Nenhum usu√°rio mencionado')
                    await sock.sendMessage(groupId, {
                        text: '‚ùå Voc√™ precisa mencionar um usu√°rio para remover.\nUso: `!kick @usuario`\n\nüí° Certifique-se de mencionar o usu√°rio (@) na mensagem.',
                        quoted: message
                    })
                    return
                }

                console.log('üéØ Tentando remover usu√°rio:', mentionedNumber)
                
                try {
                    // Verificar se o bot tem permiss√µes no grupo
                    const groupMetadata = await sock.groupMetadata(groupId)
                    
                    // Extrair n√∫mero do bot corretamente
                    const botRawId = sock.user.id
                    const botNumber = botRawId.split(':')[0]  // Pega apenas a parte antes do ':'
                    const botJid = botNumber + '@s.whatsapp.net'
                    
                    console.log('üîç === VERIFICA√á√ÉO DO BOT COMO ADMIN ===')
                    console.log('ü§ñ Bot ID bruto:', botRawId)
                    console.log('ü§ñ Bot n√∫mero extra√≠do:', botNumber)
                    console.log('ü§ñ Bot JID completo:', botJid)
                    console.log('üë• Total de participantes:', groupMetadata.participants.length)
                    
                    // Encontrar bot na lista de participantes
                    const botParticipant = groupMetadata.participants.find(p => {
                        console.log('üîç Comparando:', p.id, 'com', botJid)
                        return p.id === botJid || p.id.includes(botNumber)
                    })
                    
                    console.log('üë§ Bot encontrado:', !!botParticipant)
                    console.log('üõ°Ô∏è Status do bot:', botParticipant?.admin || 'member')
                    console.log('===========================================')
                    
                    if (!botParticipant) {
                        await sock.sendMessage(groupId, {
                            text: '‚ùå Erro: Bot n√£o encontrado na lista de participantes do grupo.\n\nü§ñ O bot precisa estar no grupo para funcionar.\nüì± Verifique se o bot foi removido acidentalmente.',
                            quoted: message
                        })
                        return
                    }
                    
                    if (!botParticipant.admin) {
                        // Listar quem s√£o os admins para ajudar o usu√°rio
                        const groupAdmins = groupMetadata.participants
                            .filter(p => p.admin === 'admin' || p.admin === 'superadmin')
                            .map(p => p.id.replace('@s.whatsapp.net', ''))
                        
                        await sock.sendMessage(groupId, {
                            text: `‚ùå Erro: O bot n√£o √© administrador do grupo.\n\nüìÑ **Como resolver:**\n1. Abra "Informa√ß√µes do grupo"\n2. Toque em "Participantes"\n3. Encontre o bot na lista\n4. Toque no nome do bot\n5. Selecione "Tornar administrador"\n\nüë• **Admins atuais:** ${groupAdmins.length}\n${groupAdmins.map(admin => `‚Ä¢ ${admin}`).join('\n')}\n\nü§ñ **Bot:** ${botNumber} (precisa ser promovido)`,
                            quoted: message
                        })
                        return
                    }
                    
                    // Remover o usu√°rio do grupo
                    const targetJid = mentionedNumber + '@s.whatsapp.net'
                    console.log('üéØ Removendo:', targetJid)
                    
                    const result = await sock.groupParticipantsUpdate(groupId, [targetJid], 'remove')
                    console.log('üì§ Resultado da remo√ß√£o:', result)
                    
                    await sock.sendMessage(groupId, {
                        text: `‚úÖ Usu√°rio foi removido do grupo pelos administradores.\n\nüë§ Removido por: Admin\n‚öñÔ∏è Motivo: Comando administrativo`,
                        quoted: message
                    })
                    
                    console.log(`üî® Admin ${senderNumber} removeu ${mentionedNumber} do grupo ${groupId}`)
                    
                } catch (error) {
                    console.error('‚ùå Erro detalhado ao remover usu√°rio:', error)
                    console.error('üìã Stack trace:', error.stack)
                    
                    let errorMessage = '‚ùå Erro ao remover usu√°rio.\n\n'
                    
                    if (error.output?.statusCode === 403) {
                        errorMessage += 'üö´ O bot n√£o tem permiss√£o para remover este usu√°rio.\n‚Ä¢ Verifique se o bot √© administrador do grupo\n‚Ä¢ O usu√°rio pode ser um admin que n√£o pode ser removido'
                    } else if (error.output?.statusCode === 404) {
                        errorMessage += 'üëª Usu√°rio n√£o encontrado no grupo ou j√° foi removido.'
                    } else {
                        errorMessage += `üîç Detalhes t√©cnicos: ${error.message}\n\nüí° Poss√≠veis solu√ß√µes:\n‚Ä¢ Certifique-se que o bot √© admin\n‚Ä¢ Verifique se o usu√°rio ainda est√° no grupo\n‚Ä¢ Tente novamente em alguns segundos`
                    }
                    
                    await sock.sendMessage(groupId, {
                        text: errorMessage,
                        quoted: message
                    })
                }
            }

            // Comando de ajuda
            if (command === 'help' || command === 'ajuda') {
                console.log('üéÜ === PROCESSANDO COMANDO HELP ===')
                const isUserAdmin = await isAdmin(senderNumber, sock, groupId)
                let helpText = `ü§ñ *Comandos do Bot*

*Para Administradores:*
‚Ä¢ \`${config.prefix}kick @usuario\` - Remove um usu√°rio do grupo
‚Ä¢ \`${config.prefix}remover @usuario\` - Remove um usu√°rio do grupo`

                if (isUserAdmin) {
                    helpText += `
‚Ä¢ \`${config.prefix}debug\` - Informa√ß√µes t√©cnicas do bot
‚Ä¢ \`${config.prefix}testmention @usuario\` - Testar detec√ß√£o de men√ß√µes
‚Ä¢ \`${config.prefix}testowner\` - Testar se voc√™ √© reconhecido como dono
‚Ä¢ \`${config.prefix}botadmin\` - Verificar se bot √© admin do grupo
‚Ä¢ \`${config.prefix}reload\` - üîÑ Recarregar comandos customizados`
                }

                helpText += `

*Geral:*
‚Ä¢ \`${config.prefix}help\` - Mostra esta mensagem
‚Ä¢ \`${config.prefix}regras\` - Exibe as regras do grupo
‚Ä¢ \`${config.prefix}testowner\` - Testa se voc√™ √© reconhecido como dono
‚Ä¢ \`${config.prefix}botadmin\` - Verifica se o bot √© admin do grupo

*Funcionalidades Autom√°ticas:*
‚úÖ Mensagem de boas-vindas para novos membros
‚úÖ Sistema de modera√ß√£o administrativo

${!isUserAdmin ? 'üí° *Voc√™ n√£o √© administrador - alguns comandos n√£o est√£o vis√≠veis*' : 'üë®‚Äçüíº *Voc√™ √© administrador - comandos completos dispon√≠veis*'}`

                await sock.sendMessage(groupId, {
                    text: helpText,
                    quoted: message
                })
            }

            // Comando para exibir regras
            if (command === 'regras' || command === 'rules') {
                console.log('üìã === PROCESSANDO COMANDO REGRAS ===')
                await sock.sendMessage(groupId, {
                    text: WELCOME_MESSAGE,
                    quoted: message
                })
            }

            // Comando de debug (apenas para admins)
            if (command === 'debug' && (await isAdmin(senderNumber, sock, groupId))) {
                console.log('üîß === PROCESSANDO COMANDO DEBUG ===')
                const botOwnerNumber = sock.user?.id?.replace(':.*', '').replace('@s.whatsapp.net', '') || 'N√£o dispon√≠vel'
                
                // Obter informa√ß√µes dos admins do grupo
                let groupAdminsInfo = ''
                try {
                    const groupMetadata = await sock.groupMetadata(groupId)
                    const groupAdmins = groupMetadata.participants
                        .filter(p => p.admin === 'admin' || p.admin === 'superadmin')
                        .map(p => p.id.replace('@s.whatsapp.net', ''))
                    
                    groupAdminsInfo = `
üë• *Admins do Grupo:* ${groupAdmins.length} encontrados
${groupAdmins.map(admin => `   ‚Ä¢ ${admin}`).join('\n')}`
                } catch (error) {
                    groupAdminsInfo = '\n‚ö†Ô∏è *Erro ao obter admins do grupo*'
                }
                
                const debugInfo = `üîß *Informa√ß√µes de Debug*

üì± *Seu n√∫mero:* ${senderNumber.replace('@s.whatsapp.net', '')}
üëë *Owner configurado:* ${config.ownerNumber || 'N√£o configurado'}
üìã *Admins configurados:* ${config.admins.length > 0 ? config.admins.join(', ') : 'Nenhum'}
ü§ñ *Bot n√∫mero conectado:* ${botOwnerNumber}
üìç *Grupo ID:* ${groupId}${groupAdminsInfo}

üí° *Sistema de Admin (4 tipos):*
‚úÖ Dono do n√∫mero conectado ao bot
‚úÖ Owner configurado em config.json  
‚úÖ Admins configurados em config.json
‚úÖ **NOVO: Admins do grupo atual**

üí° Para testar men√ß√£o: \`!testmention @usuario\``

                await sock.sendMessage(groupId, {
                    text: debugInfo,
                    quoted: message
                })
            }

            // Comando para verificar se o bot √© admin do grupo
            if (command === 'botadmin' || command === 'checkbot') {
                console.log('üß™ Verificando status do bot no grupo...')
                
                try {
                    const groupMetadata = await sock.groupMetadata(groupId)
                    const botRawId = sock.user.id
                    const botNumber = botRawId.split(':')[0]
                    const botJid = botNumber + '@s.whatsapp.net'
                    
                    const botParticipant = groupMetadata.participants.find(p => 
                        p.id === botJid || p.id.includes(botNumber)
                    )
                    
                    const groupAdmins = groupMetadata.participants
                        .filter(p => p.admin === 'admin' || p.admin === 'superadmin')
                        .map(p => `‚Ä¢ ${p.id.replace('@s.whatsapp.net', '')} (${p.admin})`)
                    
                    const botStatus = `ü§ñ *Status do Bot no Grupo*

üè† **Grupo:** ${groupMetadata.subject}
ü§ñ **Bot n√∫mero:** ${botNumber}
üìç **Bot no grupo:** ${botParticipant ? '‚úÖ SIM' : '‚ùå N√ÉO'}
üõ°Ô∏è **Bot √© admin:** ${botParticipant?.admin ? `‚úÖ ${botParticipant.admin.toUpperCase()}` : '‚ùå N√ÉO'}

üë• **Admins do grupo (${groupAdmins.length}):**
${groupAdmins.join('\n')}

üí° **Para promover o bot:**
1. Informa√ß√µes do grupo
2. Participantes  
3. Encontrar bot (${botNumber})
4. Tornar administrador`

                    await sock.sendMessage(groupId, {
                        text: botStatus,
                        quoted: message
                    })
                    
                } catch (error) {
                    await sock.sendMessage(groupId, {
                        text: `‚ùå Erro ao verificar status do bot: ${error.message}`,
                        quoted: message
                    })
                }
            }

            // Comando para testar detec√ß√£o do dono (especial para debug)
            if (command === 'testowner') {
                console.log('üß™ === TESTE ESPEC√çFICO DO DONO ===')
                console.log('üì± Mensagem fromMe:', message.key.fromMe)
                console.log('üîó senderNumber calculado:', senderNumber)
                console.log('ü§ñ sock.user.id:', sock.user?.id)
                
                const isOwner = await isAdmin(senderNumber, sock, groupId)
                
                const testResult = `üß™ *Teste de Reconhecimento do Dono*

üì± *Mensagem pr√≥pria?* ${message.key.fromMe ? '‚úÖ SIM' : '‚ùå N√ÉO'}
üî¢ *Seu n√∫mero:* ${senderNumber.replace('@s.whatsapp.net', '')}
ü§ñ *Bot conectado:* ${sock.user?.id?.replace(':.*', '') || 'N/A'}
üîê *Reconhecido como admin?* ${isOwner ? '‚úÖ SIM' : '‚ùå N√ÉO'}

${isOwner ? 
    'üéâ *SUCESSO!* Voc√™ est√° sendo reconhecido como dono do bot!' : 
    '‚ùå *PROBLEMA!* Voc√™ N√ÉO est√° sendo reconhecido como dono.'
}

üí° Se n√£o estiver funcionando, verifique os logs no terminal.`

                await sock.sendMessage(groupId, {
                    text: testResult,
                    quoted: message
                })
            }

            // Comando para testar extra√ß√£o de men√ß√£o
            if (command === 'testmention' && (await isAdmin(senderNumber, sock, groupId))) {
                console.log('üß™ Testando extra√ß√£o de men√ß√£o...')
                const mentionedNumber = getMentionedNumber(message)
                
                const testResult = `üß™ *Teste de Men√ß√£o*

${mentionedNumber ? 
    `‚úÖ Men√ß√£o encontrada: ${mentionedNumber}` : 
    '‚ùå Nenhuma men√ß√£o detectada'
}

üìã *Estrutura da mensagem:*
\`\`\`
${JSON.stringify(message.message, null, 2)}
\`\`\`

üí° Se n√£o detectou a men√ß√£o, tente:
1. Mencionar tocando no nome do usu√°rio
2. Usar @ seguido do nome completo
3. Verificar se est√° realmente mencionando`

                await sock.sendMessage(groupId, {
                    text: testResult,
                    quoted: message
                })
            }

            // Comando para recarregar configura√ß√µes (apenas admins)
            if (command === 'reload' && (await isAdmin(senderNumber, sock, groupId))) {
                console.log('üîÑ === RECARREGANDO CONFIGURA√á√ïES ===')
                try {
                    // For√ßar reload das configura√ß√µes
                    await loadWebConfig()
                    const customCommands = await getCustomCommands(true)
                    
                    const reloadResult = `üîÑ *Configura√ß√µes Recarregadas*

‚úÖ *Sucesso!* As configura√ß√µes foram atualizadas.

üìù *Comandos customizados:* ${customCommands.length}
${customCommands.length > 0 ? 
    `\nüéØ *Dispon√≠veis:*\n${customCommands.map(cmd => `‚Ä¢ !${cmd.command} ${cmd.adminOnly ? '(üîê admin)' : ''}`).join('\n')}` : 
    '\n‚ö†Ô∏è Nenhum comando customizado configurado'
}

üï∞Ô∏è *Atualizado:* ${new Date().toLocaleTimeString()}`

                    await sock.sendMessage(groupId, {
                        text: reloadResult,
                        quoted: message
                    })
                } catch (error) {
                    console.error('‚ùå Erro ao recarregar configura√ß√µes:', error)
                    await sock.sendMessage(groupId, {
                        text: `‚ùå *Erro ao Recarregar*\n\nüîç Detalhes: ${error.message}\n\nüí° Verifique se o painel web est√° rodando e tente novamente.`,
                        quoted: message
                    })
                }
            }
        } else {
            // Mensagem n√£o √© comando - log m√≠nimo
        }
        
        // Atualizar status web ap√≥s processar mensagem
        updateWebStatus(sock)
    })

    return sock
}

// Inicializar o bot
console.log('üöÄ Iniciando Bot WhatsApp...')
startBot().catch((error) => {
    console.error('‚ùå Erro fatal:', error)
    process.exit(1)
})